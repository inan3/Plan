 rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{uid} {
      allow list, read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == uid;
      match /{sub=**} {
        allow read: if request.auth != null;
        allow write: if request.auth.uid == uid;
      }
    }

    match /plans/{planId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.createdBy
        || ((request.auth.uid in resource.data.invitedUsers
            || request.auth.uid in resource.data.participants)
            && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants', 'invitedUsers', 'removedParticipants']));
    }

    match /notifications/{id} {
      allow create: if request.auth.uid == request.resource.data.senderId
        || (request.resource.data.senderId == 'system'
            && request.auth.uid == request.resource.data.receiverId);
      allow read, delete: if request.auth.uid == resource.data.receiverId
        || request.auth.uid == resource.data.senderId;
    }

    match /messages/{msgId} {
      allow create: if request.auth != null
        && request.resource.data.participants is list
        && request.resource.data.participants.size() == 2
        && request.auth.uid in request.resource.data.participants;
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null
        && resource.data.participants is list
        && request.auth.uid in resource.data.participants;
    }

    match /plan_chat/{chatId} {
      allow create, read: if request.auth != null;
      allow delete: if request.auth.uid == resource.data.senderId;
    }

    match /followers/{docId} {
      allow read, write: if request.auth != null;
    }

    match /followed/{docId} {
      allow read, write: if request.auth != null;
    }

    match /follow_requests/{id} {
      allow read, write: if request.auth != null
        && (request.auth.uid == resource.data.fromId
            || request.auth.uid == resource.data.toId);
    }

    match /blocked_users/{blockId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.blockerId;
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.blockerId;
    }

    function isPlanCreator(planId) {
      return request.auth != null
        && get(/databases/$(database)/documents/plans/$(planId)).data.createdBy ==
          request.auth.uid;
    }

    match /subscriptions/{docId} {
      allow create: if request.auth != null
        && (request.auth.uid == request.resource.data.userId
            || request.auth.uid == request.resource.data.createdBy
            || isPlanCreator(request.resource.data.id));
      allow read, update, delete: if request.auth != null
        && (request.auth.uid == resource.data.userId
            || request.auth.uid == resource.data.createdBy
            || isPlanCreator(resource.data.id));
    }

    match /reports/{docId} {
      allow create: if request.auth.uid == request.resource.data.reporterUserId;
      allow read: if request.auth.token.admin == true;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
   